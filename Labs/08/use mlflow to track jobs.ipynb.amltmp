{
  "cells": [
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "# Run a training script as a command job\n",
        "\n",
        "You can use the Python SDK for Azure Machine Learning to submit scripts as command jobs. By using jobs, you can easily keep track of the input parameters and outputs when training a machine learning model.\n",
        "\n",
        "## Before you start\n",
        "\n",
        "You'll need the latest version of the **azureml-ai-ml** package to run the code in this notebook. Run the cell below to verify that it is installed.\n",
        "\n",
        "> **Note**:\n",
        "> If the **azure-ai-ml** package is not installed, run `pip install azure-ai-ml` to install it."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%pip show azure-ai-ml"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Name: azure-ai-ml\r\nVersion: 1.13.0\r\nSummary: Microsoft Azure Machine Learning Client Library for Python\r\nHome-page: https://github.com/Azure/azure-sdk-for-python\r\nAuthor: Microsoft Corporation\r\nAuthor-email: azuresdkengsysadmins@microsoft.com\r\nLicense: MIT License\r\nLocation: /anaconda/envs/mlflow-env/lib/python3.8/site-packages\r\nRequires: azure-common, azure-core, azure-mgmt-core, azure-storage-blob, azure-storage-file-datalake, azure-storage-file-share, colorama, isodate, jsonschema, marshmallow, msrest, opencensus-ext-azure, pydash, pyjwt, pyyaml, strictyaml, tqdm, typing-extensions\r\nRequired-by: \r\nNote: you may need to restart the kernel to use updated packages.\n"
        }
      ],
      "execution_count": 2,
      "metadata": {
        "vscode": {
          "languageId": "python"
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## Connect to your workspace\n",
        "\n",
        "With the required SDK packages installed, now you're ready to connect to your workspace.\n",
        "\n",
        "To connect to a workspace, we need identifier parameters - a subscription ID, resource group name, and workspace name. Since you're working with a compute instance, managed by Azure Machine Learning, you can use the default values to connect to the workspace."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azure.identity import DefaultAzureCredential, InteractiveBrowserCredential\n",
        "from azure.ai.ml import MLClient\n",
        "\n",
        "try:\n",
        "    credential = DefaultAzureCredential()\n",
        "    # Check if given credential can get token successfully.\n",
        "    credential.get_token(\"https://management.azure.com/.default\")\n",
        "except Exception as ex:\n",
        "    # Fall back to InteractiveBrowserCredential in case DefaultAzureCredential not work\n",
        "    credential = InteractiveBrowserCredential()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1663753569264
        },
        "vscode": {
          "languageId": "python"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get a handle to workspace\n",
        "ml_client = MLClient.from_config(credential=credential)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "vscode": {
          "languageId": "python"
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core import Workspace\n",
        "from azure.ai.ml import MLClient\n",
        "from azure.identity import DefaultAzureCredential\n",
        "\n",
        "ws = Workspace.from_config()\n",
        "ml_client = MLClient(DefaultAzureCredential(), ws.subscription_id, ws.resource_group, ws.name)"
      ],
      "outputs": [],
      "execution_count": 6,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1708732648817
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## Custom tracking with MLflow\n",
        "\n",
        "When running a script as a job you can use MLflow in your training script to track the model. MLflow allows you to track any custom parameters, metrics, or artifacts you want to store with your job output.\n",
        "\n",
        "Run the following cells to create the **train-model-mlflow.py** script in the **src** folder. The script trains a classification model by using the **diabetes.csv** file in the same folder, which is passed as an argument. \n",
        "\n",
        "Review the code below to find that the script will import `mlflow` and log:\n",
        "\n",
        "- The regularization rate as a **parameter**. \n",
        "- The accuracy and AUC as **metrics**.\n",
        "- The plotted ROC curve as an **artifact**."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# create a folder for the script files\n",
        "script_folder = 'src'\n",
        "os.makedirs(script_folder, exist_ok=True)\n",
        "print(script_folder, 'folder created')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "src folder created\n"
        }
      ],
      "execution_count": 7,
      "metadata": {
        "vscode": {
          "languageId": "python"
        },
        "gather": {
          "logged": 1708732801075
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile $script_folder/train-model-mlflow.py\n",
        "# import libraries\n",
        "import mlflow\n",
        "import argparse\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.metrics import roc_curve\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def main(args):\n",
        "    # read data\n",
        "    df = get_data(args.training_data)\n",
        "\n",
        "    # split data\n",
        "    X_train, X_test, y_train, y_test = split_data(df)\n",
        "\n",
        "    # train model\n",
        "    model = train_model(args.reg_rate, X_train, X_test, y_train, y_test)\n",
        "\n",
        "    # evaluate model\n",
        "    eval_model(model, X_test, y_test)\n",
        "\n",
        "# function that reads the data\n",
        "def get_data(path):\n",
        "    print(\"Reading data...\")\n",
        "    df = pd.read_csv(path)\n",
        "    \n",
        "    return df\n",
        "\n",
        "# function that splits the data\n",
        "def split_data(df):\n",
        "    print(\"Splitting data...\")\n",
        "    X, y = df[['Pregnancies','PlasmaGlucose','DiastolicBloodPressure','TricepsThickness',\n",
        "    'SerumInsulin','BMI','DiabetesPedigree','Age']].values, df['Diabetic'].values\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\n",
        "\n",
        "    return X_train, X_test, y_train, y_test\n",
        "\n",
        "# function that trains the model\n",
        "def train_model(reg_rate, X_train, X_test, y_train, y_test):\n",
        "    mlflow.log_param(\"Regularization rate\", reg_rate)\n",
        "    print(\"Training model...\")\n",
        "    model = LogisticRegression(C=1/reg_rate, solver=\"liblinear\").fit(X_train, y_train)\n",
        "\n",
        "    return model\n",
        "\n",
        "# function that evaluates the model\n",
        "def eval_model(model, X_test, y_test):\n",
        "    # calculate accuracy\n",
        "    y_hat = model.predict(X_test)\n",
        "    acc = np.average(y_hat == y_test)\n",
        "    print('Accuracy:', acc)\n",
        "    mlflow.log_metric(\"Accuracy\", acc)\n",
        "\n",
        "    # calculate AUC\n",
        "    y_scores = model.predict_proba(X_test)\n",
        "    auc = roc_auc_score(y_test,y_scores[:,1])\n",
        "    print('AUC: ' + str(auc))\n",
        "    mlflow.log_metric(\"AUC\", auc)\n",
        "\n",
        "    # plot ROC curve\n",
        "    fpr, tpr, thresholds = roc_curve(y_test, y_scores[:,1])\n",
        "    fig = plt.figure(figsize=(6, 4))\n",
        "    # Plot the diagonal 50% line\n",
        "    plt.plot([0, 1], [0, 1], 'k--')\n",
        "    # Plot the FPR and TPR achieved by our model\n",
        "    plt.plot(fpr, tpr)\n",
        "    plt.xlabel('False Positive Rate')\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.title('ROC Curve')\n",
        "    plt.savefig(\"ROC-Curve.png\")\n",
        "    mlflow.log_artifact(\"ROC-Curve.png\")    \n",
        "\n",
        "def parse_args():\n",
        "    # setup arg parser\n",
        "    parser = argparse.ArgumentParser()\n",
        "\n",
        "    # add arguments\n",
        "    parser.add_argument(\"--training_data\", dest='training_data',\n",
        "                        type=str)\n",
        "    parser.add_argument(\"--reg_rate\", dest='reg_rate',\n",
        "                        type=float, default=0.01)\n",
        "\n",
        "    # parse args\n",
        "    args = parser.parse_args()\n",
        "\n",
        "    # return args\n",
        "    return args\n",
        "\n",
        "# run script\n",
        "if __name__ == \"__main__\":\n",
        "    # add space in logs\n",
        "    print(\"\\n\\n\")\n",
        "    print(\"*\" * 60)\n",
        "\n",
        "    # parse args\n",
        "    args = parse_args()\n",
        "\n",
        "    # run main function\n",
        "    main(args)\n",
        "\n",
        "    # add space in logs\n",
        "    print(\"*\" * 60)\n",
        "    print(\"\\n\\n\")\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Writing src/train-model-mlflow.py\n"
        }
      ],
      "execution_count": 8,
      "metadata": {
        "vscode": {
          "languageId": "python"
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "Now, you can submit the script as a command job.\n",
        "\n",
        "Run the cell below to train the model. "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azure.ai.ml import command\n",
        "\n",
        "# configure job\n",
        "\n",
        "job = command(\n",
        "    code=\"./src\",\n",
        "    command=\"python train-model-mlflow.py --training_data diabetes.csv\",\n",
        "    environment=\"AzureML-sklearn-0.24-ubuntu18.04-py37-cpu@latest\",\n",
        "    compute=\"baplowprgr020cc99\",\n",
        "    display_name=\"diabetes-train-mlflow\",\n",
        "    experiment_name=\"diabetes-training\", \n",
        "    tags={\"model_type\": \"LogisticRegression\"}\n",
        "    )\n",
        "\n",
        "# submit job\n",
        "returned_job = ml_client.create_or_update(job)\n",
        "aml_url = returned_job.studio_url\n",
        "print(\"Monitor your job at\", aml_url)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "Class AutoDeleteSettingSchema: This is an experimental class, and may change at any time. Please see https://aka.ms/azuremlexperimental for more information.\nClass AutoDeleteConditionSchema: This is an experimental class, and may change at any time. Please see https://aka.ms/azuremlexperimental for more information.\nClass BaseAutoDeleteSettingSchema: This is an experimental class, and may change at any time. Please see https://aka.ms/azuremlexperimental for more information.\nClass IntellectualPropertySchema: This is an experimental class, and may change at any time. Please see https://aka.ms/azuremlexperimental for more information.\nClass ProtectionLevelSchema: This is an experimental class, and may change at any time. Please see https://aka.ms/azuremlexperimental for more information.\nClass BaseIntellectualPropertySchema: This is an experimental class, and may change at any time. Please see https://aka.ms/azuremlexperimental for more information.\n\u001b[32mUploading src (0.53 MBs): 100%|██████████| 528629/528629 [00:00<00:00, 8418947.04it/s]\n\u001b[39m\n\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Monitor your job at https://ml.azure.com/runs/bright_basil_k5czt1x8bv?wsid=/subscriptions/c450f3d1-583c-495f-b5d3-0b38b99e70c0/resourcegroups/ba-p-zeaus-group020-rg/workspaces/p-group020-aml-ws-001&tid=49793faf-eb3f-4d99-a0cf-aef7cce79dc1\n"
        }
      ],
      "execution_count": 9,
      "metadata": {
        "vscode": {
          "languageId": "python"
        },
        "gather": {
          "logged": 1708733072821
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "In the Studio, navigate to the **diabetes-train-mlflow** job to explore the overview of the command job you ran:\n",
        "\n",
        "- Find the logged parameters in the **Overview** tab, under **Params**.\n",
        "- Find the logged metrics in the **Metrics** tab.\n",
        "- Find the logged artifacts in the **Images** tab (specifically for images), and in the **Outputs + logs** tab (all files)."
      ],
      "metadata": {}
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## Autologging with MLflow\n",
        "\n",
        "Instead of using custom logging, MLflow can also automatically log any parameters, metrics, and artifacts. Autologging with MLflow requires only one line of code.\n",
        "\n",
        "Run the following cell to create the **train-model-autolog.py** script in the **src** folder. The script trains a classification model by using the **diabetes.csv** file in the same folder, which is passed as an argument. \n",
        "\n",
        "Review the code below to find that the script will import `mlflow` and enables autologging with the line: \n",
        "\n",
        "`mlflow.autolog()`"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile $script_folder/train-model-autolog.py\n",
        "# import libraries\n",
        "import mlflow\n",
        "import argparse\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.metrics import roc_curve\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def main(args):\n",
        "    # enable autologging\n",
        "    mlflow.autolog()\n",
        "\n",
        "    # read data\n",
        "    df = get_data(args.training_data)\n",
        "\n",
        "    # split data\n",
        "    X_train, X_test, y_train, y_test = split_data(df)\n",
        "\n",
        "    # train model\n",
        "    model = train_model(args.reg_rate, X_train, X_test, y_train, y_test)\n",
        "\n",
        "    eval_model(model, X_test, y_test)\n",
        "\n",
        "# function that reads the data\n",
        "def get_data(path):\n",
        "    print(\"Reading data...\")\n",
        "    df = pd.read_csv(path)\n",
        "    \n",
        "    return df\n",
        "\n",
        "# function that splits the data\n",
        "def split_data(df):\n",
        "    print(\"Splitting data...\")\n",
        "    X, y = df[['Pregnancies','PlasmaGlucose','DiastolicBloodPressure','TricepsThickness',\n",
        "    'SerumInsulin','BMI','DiabetesPedigree','Age']].values, df['Diabetic'].values\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\n",
        "\n",
        "    return X_train, X_test, y_train, y_test\n",
        "\n",
        "# function that trains the model\n",
        "def train_model(reg_rate, X_train, X_test, y_train, y_test):\n",
        "    mlflow.log_param(\"Regularization rate\", reg_rate)\n",
        "    print(\"Training model...\")\n",
        "    model = LogisticRegression(C=1/reg_rate, solver=\"liblinear\").fit(X_train, y_train)\n",
        "\n",
        "    return model\n",
        "\n",
        "# function that evaluates the model\n",
        "def eval_model(model, X_test, y_test):\n",
        "    # calculate accuracy\n",
        "    y_hat = model.predict(X_test)\n",
        "    acc = np.average(y_hat == y_test)\n",
        "    print('Accuracy:', acc)\n",
        "\n",
        "    # calculate AUC\n",
        "    y_scores = model.predict_proba(X_test)\n",
        "    auc = roc_auc_score(y_test,y_scores[:,1])\n",
        "    print('AUC: ' + str(auc))\n",
        "\n",
        "    # plot ROC curve\n",
        "    fpr, tpr, thresholds = roc_curve(y_test, y_scores[:,1])\n",
        "    fig = plt.figure(figsize=(6, 4))\n",
        "    # Plot the diagonal 50% line\n",
        "    plt.plot([0, 1], [0, 1], 'k--')\n",
        "    # Plot the FPR and TPR achieved by our model\n",
        "    plt.plot(fpr, tpr)\n",
        "    plt.xlabel('False Positive Rate')\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.title('ROC Curve')\n",
        "    plt.savefig(\"ROC-Curve.png\") \n",
        "\n",
        "def parse_args():\n",
        "    # setup arg parser\n",
        "    parser = argparse.ArgumentParser()\n",
        "\n",
        "    # add arguments\n",
        "    parser.add_argument(\"--training_data\", dest='training_data',\n",
        "                        type=str)\n",
        "    parser.add_argument(\"--reg_rate\", dest='reg_rate',\n",
        "                        type=float, default=0.01)\n",
        "\n",
        "    # parse args\n",
        "    args = parser.parse_args()\n",
        "\n",
        "    # return args\n",
        "    return args\n",
        "\n",
        "# run script\n",
        "if __name__ == \"__main__\":\n",
        "    # add space in logs\n",
        "    print(\"\\n\\n\")\n",
        "    print(\"*\" * 60)\n",
        "\n",
        "    # parse args\n",
        "    args = parse_args()\n",
        "\n",
        "    # run main function\n",
        "    main(args)\n",
        "\n",
        "    # add space in logs\n",
        "    print(\"*\" * 60)\n",
        "    print(\"\\n\\n\")\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Writing src/train-model-autolog.py\n"
        }
      ],
      "execution_count": 10,
      "metadata": {
        "vscode": {
          "languageId": "python"
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "Now, you can submit the script as a command job.\n",
        "\n",
        "Run the cell below to train the model. "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azure.ai.ml import command\n",
        "\n",
        "# configure job\n",
        "\n",
        "job = command(\n",
        "    code=\"./src\",\n",
        "    command=\"python train-model-autolog.py --training_data diabetes.csv\",\n",
        "    environment=\"AzureML-sklearn-0.24-ubuntu18.04-py37-cpu@latest\",\n",
        "    compute=\"baplowprgr020cc99\",\n",
        "    display_name=\"diabetes-train-autolog\",\n",
        "    experiment_name=\"diabetes-training\"\n",
        "    )\n",
        "\n",
        "# submit job\n",
        "returned_job = ml_client.create_or_update(job)\n",
        "aml_url = returned_job.studio_url\n",
        "print(\"Monitor your job at\", aml_url)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "\r\u001b[32mUploading src (0.53 MBs):   0%|          | 0/531438 [00:00<?, ?it/s]\r\u001b[32mUploading src (0.53 MBs): 100%|██████████| 531438/531438 [00:00<00:00, 7011457.74it/s]\n\u001b[39m\n\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Monitor your job at https://ml.azure.com/runs/epic_diamond_2jlg1wffg1?wsid=/subscriptions/c450f3d1-583c-495f-b5d3-0b38b99e70c0/resourcegroups/ba-p-zeaus-group020-rg/workspaces/p-group020-aml-ws-001&tid=49793faf-eb3f-4d99-a0cf-aef7cce79dc1\n"
        }
      ],
      "execution_count": 11,
      "metadata": {
        "vscode": {
          "languageId": "python"
        },
        "gather": {
          "logged": 1708733130819
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "In the Studio, navigate to the **diabetes-train-autolog** job to explore the overview of the command job you ran:\n",
        "\n",
        "- Find the logged parameters in the **Overview** tab, under **Params**.\n",
        "- Find the logged metrics in the **Metrics** tab.\n",
        "- Find the logged artifacts in the **Images** tab (specifically for images), and in the **Outputs + logs** tab (all files, including the model files)."
      ],
      "metadata": {}
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "## Use MLflow to view and search for experiments\n",
        "\n",
        "The Azure Machine Learning Studio is an easy-to-use UI to view and compare job runs. Alternatively, you can use MLflow to view experiment jobs. \n",
        "\n",
        "To list the jobs in the workspace, use the following command to list the experiments in the workspace:\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import mlflow\n",
        "experiments = mlflow.search_experiments()\n",
        "for exp in experiments:\n",
        "    print(exp.name)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Morteza_AML2\nMorteza_test3\nScheduleTest\nDemoSchedulePythonScriptGithub\nraven-traffic-RLcal-342355-739425\nRON_Survival\nraven-traffic-DTcal-1455394-739425\nraven-traffic-RLcal-343351-739425\nms_test_deply\nRaven-marketshare-forecasting-739425\nRaven-marketshare-forecasting-815406\nRaven-MSEQSI-Calibration\nraven-traffic-rlcal-389373-739425\nraven-traffic-rlcal-455394-739425\nJEF_test\nraven-traffic-rlcal-390363-739425\nRON_Survival_Task\nRON_Survival_Station\nraven-traffic-rlcal-392364-739425\nraven_traffic_rlcal_392364_739425\nScheduling_jobs_for_CR_comment_categorizer_Topic\nCR_categorizer_training\ncr_experiment_training\nraven_traffic_rlcal_739425_July\nRaven-marketshare-forecasting-81540606\nRaven-moving\nraven_traffic_rlcal_739425_January\nscore_ata_recoder\nCR_categorizer_topics\ncr_experiment_topics\nCR_categorizer_prediction\ncr_experiment_prediction\nRaven-marketshare-forecasting-2019prodbackend\nschedule_ata_recoder_scoring\ndm_classifier_mlflow_experiment\ntrain_dm_classifier\nRaven-plot\nRaven-rfm-calibration\nfinal_score_ata_recoder\nPricing2-YM-HIST\ne7f6e91a-63f7-4df5-9b6b-b898a19b7d47\n81f3f4cb-2e3d-493e-a1e6-86c953c5e561\n8f9ad092-9355-4c97-84e6-c99f8f726378\n7678dce4-f6dc-4c8b-a6e0-7ae5001b38c1\n5a042e4c-9837-4691-ad0f-7641a7c18913\n20bd51ef-86e8-4fc1-9d1c-6dd02c8e7086\n8d0b17fe-b38c-427e-a4e1-a81c8a968060\nRaven-marketshare-forecasting-815406_1664465165_6351891c\nraven_traffic_rlcal_739425_July_1664483386_a58f50ee\nRaven-moving_1664577161_8cf47b30\nraven_traffic_rlcal_739425_January_1664578241_530e482e\n42a2284e-af12-41ca-b60b-2c22f90cfe34\n3f323b4d-e293-43af-94b7-80f7363ce510\nDWL_NB_Summer_Blocking\nDWL_Boeing_test\nJEF_test_new\nDWL_a320_16\nDWL_boeing_\nDWL_boeing\nCR_categorizer_training_Na\ncargo_commodity_classifier\nDWL_NB_Track_preferes_plus_spana320_16\nDWL_NB_Track_preferes_plus_span_a320_16\nraven_traffic_rlcal_739425_March\nraven_traffic_rlcal_739425_October\nraven_traffic_rlcal_739425_July_1024\nraven_traffic_rlcal_739425_January_1024\nDWL_NB_Track_preferes_plus_span_extracapforbidden_a320_16\nDWL_NB_Track_preferes_plus_span_extracapforbidden_0_a320_16\nDWL_NB_Track_preferes_plus_span_extracapforbidden_1_a320_16\nDWL_NB_15_Track_preferes_plus_span_extracapforbidden_1_a320_15\nDWL_NB_15_Track_preferes_plus_span_extracapforbidden_0_a320_15\nfinal_dm_classifier\nDWL_WB_Fixed_Capacity_LR_boeing\nDefault\ndm_classifier_training\ncli-job-r-penguins\n01-job\nPROD\nWally_\nWally_s_\nautoml-sdk-reg-jnl-exp-00\nAML\njnl-automl-exp-00\njnl-automl-exp-02\njnl-automl-exp-03\njnl-automl-exp-04\njnl-automl-exp-05\njnl-automl-exp-06\njnl-mlflow-exp-00\ne2e_registered_components\nmlops-dr-poc-dataprep-jnl-exp00\nkeras-dnn-image-classify\nSANDBOX\nWally_s_2019-01-F0\nWally_s_2020-07-F0\nWally_s_2022-12-F0\nWally_s_2020-06-F1\nWally_s_2021-03-F0\ndbc_test_exp_jnl\nTutorial-fastai\ntest-drift-detector-jnl-Monitor-Runs\nWally_task_specific_2022-12-F0\nWally_task_specific_2022-05-F0\nWally_task_specific_2022-10-F0\nDataDrift_Schedule_Run\nWally_task_specific_v2022-02-F0\ntest-detector-two-jnl-Monitor-Runs\ndr-model-monitor-Monitor-Runs\nWally_task_specific_v_v2022-02-F0\nWally_task_specific_v_v2019-07-F0\nheavy\nac_tutorial_example2\nGurobi_test\nGurobi_interactive\nac_tutorial_example1\nsp_job_exp_jnl\nsp2_job_exp_jnl\nGRB_XPRS_TEST\nraven_traffic_rlcal_739425_January_aln\nraven_traffic_rlcal_739425_March_aln\nraven_traffic_rlcal_739425_July_aln\nraven_traffic_rlcal_739425_October_aln\njdbc_test_jnl\nFleet_Boeing\ndr-data-prep-train-pipeline-dbc-experiment\nFleet_boeing\nGRB_XPRS_LP_TO_MPS\ntest-jnl-pipeline-old\nraven_traffic_rlcal_739425_January_mkt\nraven_traffic_rlcal_739425_October_mkt\nraven_traffic_rlcal_739425_March_mkt\nac_tutorial_example3\nraven_traffic_rlcal_739425_July_mkt\nac_tutorial_example4\natarec_exp\nMI-test-general-aml\naml-pipe\nraven_traffic_rlcal_739425_July_flt\nHEAT_TEST\nATA_Recoder\nMainline_ATA_Recoder\ntest_keyvault\nWally_task_specific_Test2022-07-F0\nSurvey1_Combined_Qualtrics_Classifier\nnotebook-runs\nray_on_aml\nPSA_ATA_Recoder\ntest_monitor\nCC-AdHoc\nraven_traffic_rlcal_739425_January_468600\nraven_traffic_rlcal_739425_January_466300\nata_recoder_mainline\nPNR\nREISSUES\ntest_ata_recoder_mainline\nraven_traffic_rlcal_739425_January_flt\nraven_traffic_rlcal_739425_March_flt\nraven_traffic_rlcal_739425_October_flt\nCall_intent_prediction\nauto\nCall_Intent_prediction\nRaven-marketshare-forecasting-None\nsbpnr\nhello-world-example\nTextClassification\nIntent_BERT_Train\nraven_traffic_rlcal_739425_Dec\nIntent_NMF_Train\nraven_traffic_rlcal_739425_December_mkt\n3b_pipeline_with_data\nbackend-EmailSherlock\ndeployment-automation\n5c_env_conda_file\nadls-mount\npackage-version-experiment\nraven_traffic_rlcal_739425_December_flt\nCaller-Intent\nIntent_Train\nms-interpreter\nCall_summary\ncall_summary\nraven_traffic_rlcal_739425_Dec2022\nraven_traffic_rlcal_739425_October2022\nraven_traffic_rlcal_739425_July2022\nMultiple_steps\nraven_traffic_rlcal_739425_Jul2022_mkt\nraven_traffic_rlcal_739425_October2022_mkt\nraven_traffic_rlcal_739425_December2022_mkt\nraven_traffic_rlcal_739425_July_cabin\nraven_traffic_rlcal_739425_July2022_flt\nraven_traffic_rlcal_739425_October2022_flt\nraven_traffic_rlcal_739425_December2022_flt\nspark-test\nWally_s_2023-07-P1\nfb_wb_experiment_prediction\nadv_churn_02\ntraining\nCatboost_deployment_test_for_Raven_Cost\ncontact_core\nfeedback_prism_prediction_experiment\nraven_ms_mac_forecast\nraven_traffic_rlcal_739425_January2023\nraven_traffic_rlcal_739425_March2023\nDebugOnCluster\nroutes_dump_job\nCall_Intent_OpenAI\ndeploy\nCONTACT-CORE\ncontact-core\nadfa\nCONTACT-CORE-DATA-REINSTATEMENT\npipeline\nCall_Intent_Depii\nraven_traffic_rlcal_739425_jan2023_flt\nraven_traffic_rlcal_739425_mar2023_flt\nOrgFP\nHistorical_RO\npipeline-test\nRUN-CSO\nprocess-adls\nraven_traffic_rlcal_739425_June2023\nOR_TechOps_Check_Schedule_Optimizer_CSO\nmitest\nraven_traffic_rlcal_739425_June_mkt\nSurvey_Classifier_Combined_Sitewide\nmslearn-diabetes-challenge\nATARec\nmove-diabetes-data\ndiabetes-training\nTestexp\nShutdownCI_cloned_pipeline\nJan_test_techops_mls_headcount_midrange\nPS_failure_prediction\nPilotHiring\neQSI_test\nlarch_eQSI_test\ntestenewaks\ntestnewaks1group020\nprvtssl2\ntest_240560_experiment\nAP_KM_Dist_240560_experiment\nAP_KM_Dist_240560\npQSI_test\nprepare_image\nPQSI_test\nEQSI_test\nlarch_EQSI_test\nlarch_PQSI_test\nraven-traffic-RLcal-500-739425\nraven-traffic-RLcal-1356372-739425\nraven-traffic-RLcal-600-739425\nEngine_LLP_test\nEngine_LLP\nraven-traffic-DTcal-1356372-099391\nEQSI_test_week\ncatboost_exp_Apr-29-2022\nEQSI_4week\nDRp_test\nraven-traffic-RLcal-455394-739425\nScheduledCIshutDown\nMICheck\nShutdownComputeInstanceDntTouch\nsklearn-mnist\nsklearn-tweets\nBOSS_TEST\nazureuser\ntest\ntest2\nMorteza_AddBuffer\nfastai-tweets\ntest_pipeline\nMktWeight\nAOS_DAILY_PREDICTION\ndataset_profile\ntest_r_pipeline\ntestakstrain\nTutorial-NYCTaxi\ntolou_oracle_pipeline\nAnshuTestOracleR\nyour-experiment-name\nanshu_oracle_pipeline_v1\nanshu_oracle_pipeline_v2\nanshu_oracle_pipeline_v3\nanshu_oracle_pipeline_v4\ntolou_oracle_pipeline_v1\nAzureML_Workshop\nMLS_HEADCOUNT\nMLS_HEADCOUNT_TST\nMLS_HEADCOUNT_TST2\nMLS_HEADCOUNT_TST3_CC\nMLS_HEADCOUNT_MIDRANGE\nStation_Efficiency_Prediction\nStation_MXDemand_Prediction\ne-sud-t1\noptuna-keras-mnist\noptuna-example-study\nmy_experiment\ntrain-on-local\nexample-study\ntrain_iris\noptuna-study\noptuna_rapids\noptuna_experiment\np-group020-exp1\noptuna_experiment-noimage\noptuna_experiment_v1\noptuna_experiment-hyperdrive\ntrain-from-local\nchk-sch-wed-1\nmosaicToADLSwrite\noptuna_experiment-noimage-355350\nTraffic_Calibration-355350-099391\nTraffic_Calibration-355350-426539\noptuna_experiment-noimage-355350-botorch\nTraffic_Calibration-355350-242722\ntest_demo\nTraffic_Calibration-355350-622024\noptuna_experiment-noimage-355350-botorch-LYL\noptuna_experiment-noimage-355350-botorch-LYL-agg\noptuna_experiment-noimage-355350-botorch-LYL-cons\nraven-traffic-DTcal-355350-099391\nMLS_HEADCOUNT_MIDRANGE_V1\noptuna_experiment-noimage-355350-botorch-LYL-logunif\nmy_pipeline_run\nfraud-classification-automl-tutorial\naml_training_pipeline_experiment\naml_training_pipeline_deployment_TEST_V1\naml_training_pipeline_hourly_run\n099391\nraven-traffic-DTcal-356372-099391\nTraffic_Calibration-356374-622024\noptuna_experiment-noimage-1356372-gamma\nraven-traffic-099391\nMetaGene2Vec\npeanuts_aml_module_job_scheduling_functional_test_0823\nor-group020-ws-admin\nraven-traffic-DTcal-2356372-099391\nraven-traffic-DTcal-340376-099391\nraven-traffic-DTcal-341386-099391\nraven-traffic-DTcal-340377-099391\n"
        }
      ],
      "execution_count": 12,
      "metadata": {
        "vscode": {
          "languageId": "python"
        },
        "gather": {
          "logged": 1708733145825
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "To retrieve a specific experiment, you can get it by its name:"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "experiment_name = \"diabetes-training\"\n",
        "exp = mlflow.get_experiment_by_name(experiment_name)\n",
        "print(exp)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "<Experiment: artifact_location='', creation_time=1708721699057, experiment_id='e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b', last_update_time=None, lifecycle_stage='active', name='diabetes-training', tags={}>\n"
        }
      ],
      "execution_count": 13,
      "metadata": {
        "vscode": {
          "languageId": "python"
        },
        "gather": {
          "logged": 1708733381967
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "Using an experiment name, you can retrieve all jobs of that experiment:"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "mlflow.search_runs(exp.experiment_id)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 14,
          "data": {
            "text/plain": "                     run_id                         experiment_id    status  \\\n0  clever_rocket_7pp4qgrw1h  e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b  FINISHED   \n1   bright_basil_k5czt1x8bv  e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b  FINISHED   \n2   epic_diamond_2jlg1wffg1  e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b  FINISHED   \n\n  artifact_uri                       start_time  \\\n0              2024-02-23 23:08:11.633000+00:00   \n1              2024-02-24 00:10:56.926000+00:00   \n2              2024-02-24 00:11:12.563000+00:00   \n\n                          end_time  metrics.AUC  metrics.Accuracy  \\\n0 2024-02-23 23:09:26.454000+00:00          NaN               NaN   \n1 2024-02-24 00:12:24.567000+00:00     0.848321             0.774   \n2 2024-02-24 00:12:49.322000+00:00          NaN               NaN   \n\n   metrics.training_score  metrics.training_f1_score  ...  \\\n0                     NaN                        NaN  ...   \n1                     NaN                        NaN  ...   \n2                0.790857                   0.785843  ...   \n\n   params.class_weight  params.l1_ratio  params.penalty  \\\n0                 None             None            None   \n1                 None             None            None   \n2                 None             None              l2   \n\n   params.intercept_scaling     tags.mlflow.rootRunId tags.mlflow.user  \\\n0                      None  clever_rocket_7pp4qgrw1h              Yun   \n1                      None   bright_basil_k5czt1x8bv              Yun   \n2                         1   epic_diamond_2jlg1wffg1              Yun   \n\n      tags.mlflow.runName     tags.model_type  \\\n0   diabetes-train-script                None   \n1   diabetes-train-mlflow  LogisticRegression   \n2  diabetes-train-autolog                None   \n\n                                tags.estimator_class tags.estimator_name  \n0                                               None                None  \n1                                               None                None  \n2  sklearn.linear_model._logistic.LogisticRegression  LogisticRegression  \n\n[3 rows x 37 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>run_id</th>\n      <th>experiment_id</th>\n      <th>status</th>\n      <th>artifact_uri</th>\n      <th>start_time</th>\n      <th>end_time</th>\n      <th>metrics.AUC</th>\n      <th>metrics.Accuracy</th>\n      <th>metrics.training_score</th>\n      <th>metrics.training_f1_score</th>\n      <th>...</th>\n      <th>params.class_weight</th>\n      <th>params.l1_ratio</th>\n      <th>params.penalty</th>\n      <th>params.intercept_scaling</th>\n      <th>tags.mlflow.rootRunId</th>\n      <th>tags.mlflow.user</th>\n      <th>tags.mlflow.runName</th>\n      <th>tags.model_type</th>\n      <th>tags.estimator_class</th>\n      <th>tags.estimator_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>clever_rocket_7pp4qgrw1h</td>\n      <td>e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b</td>\n      <td>FINISHED</td>\n      <td></td>\n      <td>2024-02-23 23:08:11.633000+00:00</td>\n      <td>2024-02-23 23:09:26.454000+00:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>clever_rocket_7pp4qgrw1h</td>\n      <td>Yun</td>\n      <td>diabetes-train-script</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bright_basil_k5czt1x8bv</td>\n      <td>e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b</td>\n      <td>FINISHED</td>\n      <td></td>\n      <td>2024-02-24 00:10:56.926000+00:00</td>\n      <td>2024-02-24 00:12:24.567000+00:00</td>\n      <td>0.848321</td>\n      <td>0.774</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>bright_basil_k5czt1x8bv</td>\n      <td>Yun</td>\n      <td>diabetes-train-mlflow</td>\n      <td>LogisticRegression</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>epic_diamond_2jlg1wffg1</td>\n      <td>e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b</td>\n      <td>FINISHED</td>\n      <td></td>\n      <td>2024-02-24 00:11:12.563000+00:00</td>\n      <td>2024-02-24 00:12:49.322000+00:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.790857</td>\n      <td>0.785843</td>\n      <td>...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>l2</td>\n      <td>1</td>\n      <td>epic_diamond_2jlg1wffg1</td>\n      <td>Yun</td>\n      <td>diabetes-train-autolog</td>\n      <td>None</td>\n      <td>sklearn.linear_model._logistic.LogisticRegression</td>\n      <td>LogisticRegression</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 37 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 14,
      "metadata": {
        "vscode": {
          "languageId": "python"
        },
        "gather": {
          "logged": 1708734053869
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "To more easily compare job runs and outputs, you can configure the search to order the results. For example, the following cell orders the results by `start_time`, and only shows a maximum of `2` results: "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "mlflow.search_runs(exp.experiment_id, order_by=[\"start_time DESC\"], max_results=2)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 15,
          "data": {
            "text/plain": "                    run_id                         experiment_id    status  \\\n0  epic_diamond_2jlg1wffg1  e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b  FINISHED   \n1  bright_basil_k5czt1x8bv  e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b  FINISHED   \n\n  artifact_uri                       start_time  \\\n0              2024-02-24 00:11:12.563000+00:00   \n1              2024-02-24 00:10:56.926000+00:00   \n\n                          end_time  metrics.training_score  \\\n0 2024-02-24 00:12:49.322000+00:00                0.790857   \n1 2024-02-24 00:12:24.567000+00:00                     NaN   \n\n   metrics.training_recall_score  metrics.training_f1_score  \\\n0                       0.790857                   0.785843   \n1                            NaN                        NaN   \n\n   metrics.training_log_loss  ...  params.l1_ratio  params.penalty  \\\n0                   0.434393  ...             None              l2   \n1                        NaN  ...             None            None   \n\n   params.Regularization rate  params.intercept_scaling  \\\n0                        0.01                         1   \n1                        0.01                      None   \n\n                                tags.estimator_class    tags.mlflow.rootRunId  \\\n0  sklearn.linear_model._logistic.LogisticRegression  epic_diamond_2jlg1wffg1   \n1                                               None  bright_basil_k5czt1x8bv   \n\n      tags.mlflow.runName tags.estimator_name tags.mlflow.user  \\\n0  diabetes-train-autolog  LogisticRegression              Yun   \n1   diabetes-train-mlflow                None              Yun   \n\n      tags.model_type  \n0                None  \n1  LogisticRegression  \n\n[2 rows x 37 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>run_id</th>\n      <th>experiment_id</th>\n      <th>status</th>\n      <th>artifact_uri</th>\n      <th>start_time</th>\n      <th>end_time</th>\n      <th>metrics.training_score</th>\n      <th>metrics.training_recall_score</th>\n      <th>metrics.training_f1_score</th>\n      <th>metrics.training_log_loss</th>\n      <th>...</th>\n      <th>params.l1_ratio</th>\n      <th>params.penalty</th>\n      <th>params.Regularization rate</th>\n      <th>params.intercept_scaling</th>\n      <th>tags.estimator_class</th>\n      <th>tags.mlflow.rootRunId</th>\n      <th>tags.mlflow.runName</th>\n      <th>tags.estimator_name</th>\n      <th>tags.mlflow.user</th>\n      <th>tags.model_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>epic_diamond_2jlg1wffg1</td>\n      <td>e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b</td>\n      <td>FINISHED</td>\n      <td></td>\n      <td>2024-02-24 00:11:12.563000+00:00</td>\n      <td>2024-02-24 00:12:49.322000+00:00</td>\n      <td>0.790857</td>\n      <td>0.790857</td>\n      <td>0.785843</td>\n      <td>0.434393</td>\n      <td>...</td>\n      <td>None</td>\n      <td>l2</td>\n      <td>0.01</td>\n      <td>1</td>\n      <td>sklearn.linear_model._logistic.LogisticRegression</td>\n      <td>epic_diamond_2jlg1wffg1</td>\n      <td>diabetes-train-autolog</td>\n      <td>LogisticRegression</td>\n      <td>Yun</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bright_basil_k5czt1x8bv</td>\n      <td>e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b</td>\n      <td>FINISHED</td>\n      <td></td>\n      <td>2024-02-24 00:10:56.926000+00:00</td>\n      <td>2024-02-24 00:12:24.567000+00:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0.01</td>\n      <td>None</td>\n      <td>None</td>\n      <td>bright_basil_k5czt1x8bv</td>\n      <td>diabetes-train-mlflow</td>\n      <td>None</td>\n      <td>Yun</td>\n      <td>LogisticRegression</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 37 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 15,
      "metadata": {
        "vscode": {
          "languageId": "python"
        },
        "gather": {
          "logged": 1708734300933
        }
      }
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "source": [
        "You can even create a query to filter the runs. Filter query strings are written with a simplified version of the SQL `WHERE` clause. \n",
        "\n",
        "To filter, you can use two classes of comparators:\n",
        "\n",
        "- Numeric comparators (metrics): =, !=, >, >=, <, and <=.\n",
        "- String comparators (params, tags, and attributes): = and !=.\n",
        "\n",
        "Learn more about [how to track experiments with MLflow](https://learn.microsoft.com/azure/machine-learning/how-to-track-experiments-mlflow)."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"metrics.AUC > 0.8 and tags.model_type = 'LogisticRegression'\"\n",
        "mlflow.search_runs(exp.experiment_id, filter_string=query)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 16,
          "data": {
            "text/plain": "                    run_id                         experiment_id    status  \\\n0  bright_basil_k5czt1x8bv  e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b  FINISHED   \n\n  artifact_uri                       start_time  \\\n0              2024-02-24 00:10:56.926000+00:00   \n\n                          end_time  metrics.AUC  metrics.Accuracy  \\\n0 2024-02-24 00:12:24.567000+00:00     0.848321             0.774   \n\n  params.Regularization rate tags.mlflow.user    tags.mlflow.rootRunId  \\\n0                       0.01              Yun  bright_basil_k5czt1x8bv   \n\n     tags.mlflow.runName     tags.model_type  \n0  diabetes-train-mlflow  LogisticRegression  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>run_id</th>\n      <th>experiment_id</th>\n      <th>status</th>\n      <th>artifact_uri</th>\n      <th>start_time</th>\n      <th>end_time</th>\n      <th>metrics.AUC</th>\n      <th>metrics.Accuracy</th>\n      <th>params.Regularization rate</th>\n      <th>tags.mlflow.user</th>\n      <th>tags.mlflow.rootRunId</th>\n      <th>tags.mlflow.runName</th>\n      <th>tags.model_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>bright_basil_k5czt1x8bv</td>\n      <td>e781bef0-8bb6-4bb1-bf4f-819aa2f74d1b</td>\n      <td>FINISHED</td>\n      <td></td>\n      <td>2024-02-24 00:10:56.926000+00:00</td>\n      <td>2024-02-24 00:12:24.567000+00:00</td>\n      <td>0.848321</td>\n      <td>0.774</td>\n      <td>0.01</td>\n      <td>Yun</td>\n      <td>bright_basil_k5czt1x8bv</td>\n      <td>diabetes-train-mlflow</td>\n      <td>LogisticRegression</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16,
      "metadata": {
        "vscode": {
          "languageId": "python"
        },
        "gather": {
          "logged": 1708734305056
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "mlflow-env"
    },
    "kernelspec": {
      "name": "mlflow-env",
      "language": "python",
      "display_name": "mlflow-env"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      },
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "vscode": {
      "interpreter": {
        "hash": "f2b2cd046deda8eabef1e765a11d0ec9aa9bd1d31d56ce79c815a38c323e14ec"
      }
    },
    "language_info": {
      "name": "python",
      "version": "3.8.18",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}